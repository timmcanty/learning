# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause this
# file to always be loaded, without a need to explicitly require it in any files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    # be_bigger_than(2).and_smaller_than(4).description
    #   # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #   # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  def make_user(username)
    visit(new_user_url)
    fill_in('Username', :with => username)
    fill_in('Password', :with => "123456")
    click_button('Create')
  end

  def login_user(username)
    visit(new_session_url)
    fill_in('Username', :with => username)
    fill_in('Password', :with => "123456")
    click_button('Login')
  end

  def logout_user
    visit( new_session_url )
    click_button('Logout')
  end

  def make_user_with_goal(username,goal, privacy = "Public")
    make_user(username)
    login_user(username)

    click_link("Create New Goal")
    fill_in("Content", with: goal)
    choose(privacy)
    click_button("submit")
  end

  def make_another_goal(goal,privacy = "Public")
    visit(goals_url)
    click_link("Create New Goal")
    fill_in("Content", with: goal)
    choose(privacy)
    click_button("submit")
  end

  def edit_goal(goal, privacy = "Public", complete = "not Complete")
    click_link(goal)
    fill_in("Content", with: "some updates")
    choose(privacy)
    choose(complete)
    click_button("submit")
  end

  def submit_comment(body)
    fill_in("Body", with: body)
    click_button("submit")
  end

  def create_goal_comment
    make_user_with_goal("Tim","g1","Private")
    make_another_goal("g2","Public")
    logout_user

    make_user_with_goal("Julian","g3","Public")
    click_link("Tim") #user's show page
    click_link("show_Tim_g2") #goal's show page
    click_link("Create Comment")
    submit_comment("c1")
  end

  def create_user_comment
    make_user_with_goal("Tim","g1","Private")
    make_another_goal("g2","Public")
    logout_user

    make_user_with_goal("Julian","g3","Public")
    click_link("Tim")
    click_link("Create Comment")
    submit_comment("c1")
  end

end
